---
title: 前后端分离实践 - 一周工作总结
layout: post
category: Chinese
tags:
- Node.js
- Apache
---

开发的company page终于上线，下一个项目是翻新公司网站，设计师对现有设计十分不满，基本上是要重新开发。我看了一下现在网站的系统，混乱不堪，导致我对前后端分离的执念更加严重。

现有网站使用Django搭建，部署在Heroku上，有一些问题：

- Django的开发和生产过程中为了保持静态文件的URL一致，通常要在模板里URL前加入`STATIC_URL`的字样。但我在专注前端实现的时候使用Node.js做测试服务器，这个前缀让我感觉非常束缚。我曾想过用Gulp在构建的过程中自动替换URL加入前缀，但这种方式始终让我觉得更像是一种hack
- 原来的工程师把所有css和js放在一起，直接编辑，没有任何构建的过程，在js文件夹里，光jQuery就有好几个不同版本。而且，所有的静态图片都放在img文件夹中，哪个能动，哪个不能动，根本无法知道
- Django内有template系统。我不讨厌Django，事实上，我学的第一个框架就是Django，但是Django实在是一个太重的框架，就连部署到Heroku上每次都要花个三五分钟
- 我更想在开发的时候专注于前端实现，而不是本地运行个MySQL的同时再加上Gulp和foreman

现在的整个网站系统有些混乱，两台EC服务器运行Apache和业务复杂的一个web app产品项目，一个Heroku服务器负责网站，还有一个wordpress服务器负责媒体和博客。我的目的是尽量简单地实现过渡，并且能模块化开发，方便以后的维护和持续开发，设想了以下几种方案：

- 在原来的Django项目上持续扩展，重新组织架构并慢慢把原先的网站同化。但是原来的网站设计毫无章法，文件结构混乱，实在让人头痛
- 在Apache服务器前加一个Nginx来伺服静态页面，这样我可以回到最原始的html开发过程，完全专注前端。但缺点是网站仍然有一些动态内容，或者以后会添加动态内容。还是需要一个简单的服务器
- 在服务器本地搭建Node.js，利用Apache反向代理运行网站。这个方法起初很有诱惑力的。但是整个网站使用SSL，我对Apache的配置并不是很精通，生怕一个不小心整个系统都悲剧了。
- 最后我选择的是使用Heroku托管一个Node.js做前端，用Apache把URL直接转过来。Node.js最爽的一点是搭配Express.js部署迅速，开发和生产环境一致，前后端一套语言，简直让人欲罢不能。

实现以后，效果惊人，开发目录简洁方便，能够让我专心于前端的实现。